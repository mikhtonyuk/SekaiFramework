// FastDelegate facility from CodeProject

#ifndef __FASTDELEGATE_H
#define __FASTDELEGATE_H

#include <memory.h>

////////////////////////////////////////////////////////////////////////////////
//						Configuration options
//
////////////////////////////////////////////////////////////////////////////////

// Uncomment the following #define for optimally-sized delegates.
// In this case, the generated asm code is almost identical to the code you'd get
// if the compiler had native support for delegates.
// It will not work on systems where sizeof(dataptr) < sizeof(codeptr). 
// Thus, it will not work for DOS compilers using the medium model.
// It will also probably fail on some DSP systems.
#define FASTDELEGATE_USESTATICFUNCTIONHACK

// Uncomment the next line to allow function declarator syntax.
// It is automatically enabled for those compilers where it is known to work.
#define FASTDELEGATE_ALLOW_FUNCTION_TYPE_SYNTAX




////////////////////////////////////////////////////////////////////////////////
//						Compiler identification for workarounds
//
////////////////////////////////////////////////////////////////////////////////

// Compiler identification. It's not easy to identify Visual C++ because
// many vendors fraudulently define Microsoft's identifiers.
#if defined(_MSC_VER) && !defined(__MWERKS__) && !defined(__VECTOR_C) && !defined(__ICL) && !defined(__BORLANDC__)
#define FASTDLGT_ISMSVC

#if (_MSC_VER <1300) // Many workarounds are required for VC6.
#define FASTDLGT_VC6
#pragma warning(disable:4786) // disable this ridiculous warning
#endif

#endif

// Does the compiler uses Microsoft's member function pointer structure?
// If so, it needs special treatment.
// Metrowerks CodeWarrior, Intel, and CodePlay fraudulently define Microsoft's 
// identifier, _MSC_VER. We need to filter Metrowerks out.
#if defined(_MSC_VER) && !defined(__MWERKS__)
#define FASTDLGT_MICROSOFT_MFP

#if !defined(__VECTOR_C)
// CodePlay doesn't have the __single/multi/virtual_inheritance keywords
#define FASTDLGT_HASINHERITANCE_KEYWORDS
#endif
#endif

// Does it allow function declarator syntax? The following compilers are known to work:
#if defined(FASTDLGT_ISMSVC) && (_MSC_VER >=1310) // VC 7.1
#define FASTDELEGATE_ALLOW_FUNCTION_TYPE_SYNTAX
#endif

// Gcc(2.95+), and versions of Digital Mars, Intel and Comeau in common use.
#if defined (__DMC__) || defined(__GNUC__) || defined(__ICL) || defined(__COMO__)
#define FASTDELEGATE_ALLOW_FUNCTION_TYPE_SYNTAX
#endif

// It works on Metrowerks MWCC 3.2.2. From boost.Config it should work on earlier ones too.
#if defined (__MWERKS__)
#define FASTDELEGATE_ALLOW_FUNCTION_TYPE_SYNTAX
#endif

#ifdef __GNUC__ // Workaround GCC bug #8271 
	// At present, GCC doesn't recognize constness of MFPs in templates
#define FASTDELEGATE_GCC_BUG_8271
#endif





////////////////////////////////////////////////////////////////////////////////
//						General tricks used in this code
//
// (a) Error messages are generated by typdefing an array of negative size to
//     generate compile-time errors.
// (b) Warning messages on MSVC are generated by declaring unused variables, and
//	    enabling the "variable XXX is never used" warning.
// (c) Unions are used in a few compiler-specific cases to perform illegal casts.
// (d) For Microsoft and Intel, when adjusting the 'this' pointer, it's cast to
//     (char *) first to ensure that the correct number of *bytes* are added.
//
////////////////////////////////////////////////////////////////////////////////


namespace reflection 
{
	////////////////////////////////////////////////////////////////////////////////
	//						Helper templates
	//
	////////////////////////////////////////////////////////////////////////////////
	#include "Delegate_utils.h"



	////////////////////////////////////////////////////////////////////////////////
	//						Fast Delegates, part 2:
	//
	//	Define the delegate storage, and cope with static functions
	//
	////////////////////////////////////////////////////////////////////////////////
	#include "Delegate_funcdata.h"	
	#include "Delegate_closure.h"



	////////////////////////////////////////////////////////////////////////////////
	//						Fast Delegates, part 3:
	//
	//				Wrapper classes to ensure type safety
	//
	////////////////////////////////////////////////////////////////////////////////
	#include "DelegateBase.h"
	#include "Delegate_deleg.h"


	////////////////////////////////////////////////////////////////////////////////
	//						Fast Delegates, part 4:
	// 
	//				Delegate<> class (Original author: Jody Hagins)
	//	Allows boost::function style syntax like:
	//			Delegate< double (int, long) >
	// instead of:
	//			Delegate2< int, long, double >
	//
	////////////////////////////////////////////////////////////////////////////////
	#include "Delegate_funcstyle.h"



	////////////////////////////////////////////////////////////////////////////////
	//						Fast Delegates, part 5:
	//
	//				MakeDelegate() helper function
	//
	//			MakeDelegate(&x, &X::func) returns a fastdelegate of the type
	//			necessary for calling x.func() with the correct number of arguments.
	//			This makes it possible to eliminate many typedefs from user code.
	//
	////////////////////////////////////////////////////////////////////////////////
	#define DELEG_CONST
	#include "Delegate_makedeleg.h"
	#undef DELEG_CONST
	#define DELEG_CONST const
	#include "Delegate_makedeleg.h"
	#undef DELEG_CONST

	template <class FT>
	Delegate<FT> MakeDelegate(FT* func) { return Delegate<FT>(func); }
	

} // namespace

#endif // __FASTDELEGATE_H

